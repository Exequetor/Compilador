programa includes header bloque_sentencias
bloque_sentencias { lista_sentencias }
includes # include < stdio.h >
header main ( )
header int main ( )
header void main ( )
lista_sentencias printf ( literal more_args ) ; lista_sentencias
lista_sentencias scanf ( literal more_args ) ; lista_sentencias
lista_sentencias declaracion_var ; lista_sentencias
lista_sentencias asignaciones ; lista_sentencias
lista_sentencias estructura_control lista_sentencias
lista_sentencias return expresion ; lista_sentencias
lista_sentencias id ( ) ; lista_sentencias
lista_sentencias new_asig lista_sentencias
lista_sentencias Eps
new_asig id + + ; new_asig
new_asig id - - ; new_asig
new_asig id + = nint ; new_asig
new_asig Eps
constanteNum nint
constanteNum - nint
constanteNum nfloat
constanteNum - nfloat
constanteLit literal
constanteLitc literalc
constanteGeneral constanteNum
constanteGeneral constanteLit
constanteGeneral constanteLitc
apuntadores *
apuntadores memReferencia
declaracion_var tipo more_id next_var
tipo int
tipo float
tipo char
tipo double
apuntador * apuntador
apuntador id
memReferencia &
memReferencia Eps
more_id apuntador matrix
next_var , more_id next_var
next_var Eps
matrix [ expresion ] matrix
matrix Eps
asignaciones more_id = expresion
expresion expresion + expresion
expresion expresion * expresion
expresion expresion / expresion
expresion expresion % expresion
expresion ( expresion )
expresion more_id
expresion constanteNum
more_args , id more_args
more_args , apuntadores id more_args
more_args , constanteGeneral more_args
more_args Eps
estructura_control estructura_if
estructura_control estructura_while
estructura_control estructura_for
estructura_control estructura_switch
estructura_control estructura_do_while
estructura_if if ( expresionLogica ) { lista_sentencias } estructura_else
estructura_else else { lista_sentencias }
estructura_else Eps
estructura_while while ( expresionLogica ) { lista_sentencias }
estructura_do_while do { lista_sentencias } while ( expresionLogica ) ;
estructura_for for ( inicializaciones ; expresionLogica ; asignacion_for ) { lista_sentencias }
estructura_switch switch ( id ) { estructura_case Default }
estructura_case case nint : lista_sentencias Break estructura_case
estructura_case Eps
Default default : lista_sentencias
Default Eps
Break break ;
Break Eps
asignacion_for id + + otra_asignacion_for
asignacion_for id - - otra_asignacion_for
asignacion_for id + = nint otra_asignacion_for
asignacion_for + + id otra_asignacion_for
asignacion_for - - id otra_asignacion_for
otra_asignacion_for Eps
otra_asignacion_for , asignacion_for
inicializaciones id = nint otra_inicializaciones
otra_inicializaciones Eps
otra_inicializaciones , inicializaciones
expresionLogica expresionLogica & & expresionLogica
expresionLogica expresionLogica | | expresionLogica
expresionLogica expresionLogica ! = expresionLogica
expresionLogica expresionLogica = = id
expresionLogica expresionLogica = = nint
expresionLogica expresionLogica > = id
expresionLogica expresionLogica > = nint
expresionLogica expresionLogica < = id
expresionLogica expresionLogica < = nint
expresionLogica expresionLogica < id
expresionLogica expresionLogica < nint
expresionLogica expresionLogica > id
expresionLogica expresionLogica > nint
expresionLogica ! expresionLogica
expresionLogica ( expresionLogica )
expresionLogica id
expresionLogica nint
expresionLogica - nint